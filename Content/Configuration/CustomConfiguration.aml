<?xml version="1.0" encoding="utf-8"?>
<topic id="a155bb48-95ab-49c9-9b61-ebcc119dc2dd" revisionNumber="1">
  <developerSampleDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Similar to custom configuration on good old fashioned GUI Extensions, Alchemy4Tridion allows your plugin
      to have its own custom configuration elements via the <codeInline>&lt;settings /&gt;</codeInline> element in
      the <application>a4t.xml</application> file of your plugin package (if this file is not present in the
      NuGet package you selected to build your plugin with, it'll automatically be created as soon as you build
      the project).
    </para>
    </introduction>

    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Adding Custom Configuration to the a4t.xml File</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          To add custom configuration for your plugin, you can include a <codeInline>&lt;settings /&gt;</codeInline> element
          inside of your a4t.xml file. Within this element you can have any structure of Xml that you wish, with the exception
          of <codeInline>&lt;client /&gt;</codeInline> and <codeInline>&lt;encrypt /&gt;</codeInline> which are
          reserved for special meaning (see below).  At its simplest form, each Xml Element's name represents the
          key to a setting, and the text within the element represents that setting's value.
        </para>
        <code language="xml" title="Basic Usage">
          <![CDATA[
          <plugin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.alchemywebstore.com/">
            <name>YourPluginName</name>
            <settings>
              <SomeKey>Some Value</SomeKey>
              <SomeRandomNumber>42</SomeRandomNumber>
              <IsABoolean>true</IsABoolean>
            </settings>
          </plugin>
          ]]>
        </code>
      </content>
    </section>

    <section>
      <title>Basic Retrieval of Settings</title>
      <content>
        <para>
          The plugin instance has a <codeInline>Settings</codeInline> property which is a getter that returns a new
          instance of <codeInline>IPluginSettings</codeInline>.  It's important to note that the <codeInline>IPluginSettings</codeInline>
          is not cached and will return a new instance every time you call the plugin's <codeInline>Settings</codeInline>
          property.  If you are making a lot of calls to the Settings, it would be wise to store the instance in a local
          variable as you work with it.
        </para>
        <para>
          Once you have the settings instance, you can use the various <codeInline>Get</codeInline> methods to get
          values from your custom xml configuration.
        </para>
        <code language="c#">
          IPluginSettings settings = plugin.Settings;
          
          string someKey = settings.Get("SomeKey");
          int someRandomNumber = settings.Get&lt;int&gt;("SomeRandomNumber");
          bool isABoolean = settings.Get&lt;bool&gt;("IsABoolean");
          string nope = settings.Get("DoesNotExist"); // value is null since our custom configuration above does not contain this key
        </code>
      </content>
    </section>

    <section>
      <title>Nested Settings</title>
      <content>
        <para>
          
        </para>
      </content>
    </section>

    <section>
      <title>Deserialization of Settings</title>
      <content>
        <para>

        </para>
      </content>
    </section>
    
    <section>
      <title>Client Settings</title>
      <content>
        <para>
          So far in our custom configuration settings we've had what are considered to be server side config values. But
          what if we want settings that can be read easily from the client side as well?  Alchemy4Tridion provides
          a JS proxy that will grab settings that are considered to be "client" settings.
        </para>
        <code language="xml" title="Basic Usage">
          <![CDATA[
          <plugin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.alchemywebstore.com/">
            <name>YourPluginName</name>
            <settings>
              <SomeServerKey>Some Server Value</SomeServerKey>
              <SomeClientKey client="true">Some Client Value</SomeClientKey>
              <client>
                <SomeKey>Some Value</SomeKey>
                <SomeRandomNumber>42</SomeRandomNumber>
                <IsABoolean>true</IsABoolean>
              </client>
            </settings>
          </plugin>
          ]]>
        </code>
        <para>
          The above example shows two ways of enabling a custom configuration element to be able to be read by the client API.
          The first is by adding the attribute "client" to any element with a value of "true".  The second is by using
          the special <codeInline>&lt;client /&gt;</codeInline> element.  The "client" element itself is not considered
          to be a "key", but rather any child elements within it act as if they have the <codeInline>client="true"</codeInline> 
          attribute.
        </para>
        <para>
          To be able to grab the client configuration from your plugin's JavaScript, you'll have to add the call to 
          <codeInline>AddWebApiProxy();</codeInline> from your <application>ResourceGroup</application>'s constructor.
          If you've already read / developed with Alchemy's API Controllers, you'll notice that this method also
          is responsible for generating the JavaScript proxy to communicate with your controllers.
        </para>
        <code language="c#">
          public class MyResourceGroup : ResourceGroup
          {
              public ServicerCommandFilesGroup()
                  : base("CommandFiles")
              {
                  AddWebApiProxy();
                  AddFile("SomeCommand.js");
              }
          }
        </code>
        <para>
          This will allow you to make the following call in your JavaScript:
        </para>
        <code language="js">
          Alchemy.Plugins.MyPluginName.Api.getSettings()
              .success(function (settings) {
                  console.log(settings.SomeServerKey);
                  console.log(settings.IsABoolean);
              })
              .error(function (error) {
              
              });
        </code>
        <alert class="tip">
          <para>
            It's important to note that when settings are returned like this, the keys are case sensitive and will
            match the casing of your element names.  Also the values will all be strings. If you wish to have
            more control over the value types, please refer to the section on strongly typed client settings.
          </para>
        </alert>
      </content>
    </section>

    <section>
      <title>Strongly Typed Client Settings</title>
      <content>
        <para>

        </para>
      </content>
    </section>
    
    <section>
      <title>Encrypted Settings</title>
      <content>
        <para></para>
      </content>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>
