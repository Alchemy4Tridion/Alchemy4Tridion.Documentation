<?xml version="1.0" encoding="utf-8"?>
<topic id="e48e8917-e3ff-4190-80dc-3fb9096ffa87" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Alchemy4Tridion allows for plugins of various extension types (or will allow
        for multiple types in the near future).
      </para>
    </introduction>



    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="PluginTypes">
      <title>Plugin Types</title>
      <content>
        <para>
          Alchemy4Tridion allows for extending Tridion in multiple ways.  Below you can find the various
          types of plugins that you can create.  Note that your plugin can actually be a combination
          of multiple types and is not tied to just one.
        </para>
      </content>
      <sections>
        <section address="GUIExtensions">
          <title>GUI Extensions</title>
          <content>
            <para>
              Alchemy4Tridion's GUI Extension type allows you to develop GUI Extensions similar to
              how traditional GUI Extensions would be built.  Alchemy4Tridion has some utility methods
              and wrappers for ease of development, but really just utilizes Tridion's anguilla framework.
              This means that most of your JavaScript code that you may have used on a GUI Extension will
              work as an Alchemy Plugin.
            </para>
            <para>
              <link xlink:href="a3ce173c-2569-4784-89d3-3f7e9d958a96">Read more on GUI Extension Plugins</link>
            </para>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
