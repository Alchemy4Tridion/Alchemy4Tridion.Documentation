<?xml version="1.0" encoding="utf-8"?>
<topic id="8d2687f9-346a-4874-9b39-56aa14d371e9" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Extended Areas allow you to add custom content into <phrase>predefined</phrase> areas of the Tridion GUI. Which predefined areas you ask? These are special &lt;c:ExtendableArea id="TakeNoteOfThisId" /&gt; controls that exist on some of the Tridion View pages that you can target to add content to.  For example, on the <application>Help</application> page (if you look at the actual aspx page on the Tridion server), there's a &lt;c:ExtendableArea id="InstalledProductsDocumentation" runat="server" /&gt; control... you can create an Extended Area extension that targets the <command>Help View</command>'s <command>InstalledProductsDocumentation</command> area.
      </para>
      <para>
        The follow sections shows how to create an extended area extension.
      </para>
      <autoOutline />
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="CreateUserControl">
      <title>Create an ASCX User Control</title>
      <content>
        <para>
          You'll need a .ascx control that represents the content. You can create this in your <command>Static</command> folder.
        </para>
        <code language="asp.net" title="/Static/Controls/Sample.ascx">
          &lt;%@ Control Language="C#" %&gt;
          &lt;h2&gt;Your Custom Content Can Go Here&lt;/h2&gt;
        </code>
        <alert class="note">
          <para>
            Remember, all files within your static folder automatically end up at <fictitiousUri>/assets/controls/your-file.ascx</fictitiousUri> within your plugin package, despite how you organize it. You'll want to ensure that your contols have unique filenames even if in different folders.
          </para>
        </alert>
      </content>
    </section>

    <section address="StaticFiles">
      <title>Optional Static Files</title>
      <content>
        <para>
          Your Exteded Area Extension may include JavaScript and Stylesheets for its functionality and looks.  Create your static files just like any other extension (and doing forget to include the <link xlink:href="7a08abe0-5cb5-414d-9644-1e856c8bebae">Resource Group</link> if you do.
        </para>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
