<?xml version="1.0" encoding="utf-8"?>
<topic id="a3ce173c-2569-4784-89d3-3f7e9d958a96" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        GUI Extenions for Alchemy4Tridion are built off of the existing Anguilla framework but contains
        utilities and tools that help automate a lot of the pain staking tasks that you might of
        had to deal with before.  One of the main differences in building a GUI Extension for Alchemy4Tridion
        versus the tradtional way is with how Configuration is dealt with. A good reference point that you can
        use as an example is the <externalLink>
          <linkText>Hello World</linkText>
          <linkUri>https://github.com/Alchemy4Tridion/Alchemy4Tridion.Plugins.Sample.HelloWorld</linkUri>
          <linkTarget>_blank</linkTarget>
        </externalLink> plugin project.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Configuration">
      <title>Configuration</title>
      <content>
        <para>
          Configuration in Alchemy4Tridion for GUI Extension utilizes code over configuration. That is, you'll
          no longer be figuring out what elements to add to the editor config, but rather will
          be creating classes in .NET that inherit base classes that represent the type of items you are trying to create.
          For example, to create a Resource Group, you'll create a class that inherits from
          <codeEntityReference>T:Alchemy4Tridion.Plugins.GUI.Configuration.ResourceGroup</codeEntityReference>
          and in your constructor call any methods and properties to configure your resource group to your needs.
          This provides the benefit of having Intellisense to provide you with tips/instructions as well
          as compile time error checking (no more accidently misspelling an element name and having Tridion's
          GUI go haywire on you).
        </para>
        <alert class="note">
          <para>
            Alchemy4Tridion still uses an Editor Configuration file behind the scenes.  When your plugin installs,
            the framework is responsible for adding the necessary elements which your config classes represents. During
            an uninstall, the framework removes all elements that were created by your plugin.
          </para>
        </alert>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section address="Basics">
      <title>Basics</title>
      <content>
        <para>
          Most of the GUI Extension types that you'll create have the same basic steps that you will follow
          for each one.
        </para>
        <list class="ordered">
          <listItem>
            <para>
              Add static files to your "Static" or "Assets" folder in your class library project. This includes JavaScript files 
              that represent Commands or functionality for your plugin, StyleSheets to make your extensions look
              good, views or user controls, etc.  This is pretty much the same step that you'd do with a traditional
              extension.
            </para>
          </listItem>
          <listItem>
            <para>
              If you're including JavaScript Commands, include a class that inherits from
              <codeEntityReference>T:Alchemy4Tridion.Plugins.GUI.Configuration.CommandSet</codeEntityReference>.
            </para>
            <code language="c#">
              public class MyCommands : CommandSet
              {
                  public ServicerCommandSet()
                  {
                      AddCommand("MyCommand");
                  }
              }
            </code>
            <alert class="tip">
              <para>
                In the above example, it is assumed that you crated a command with the name of "MyCommand" via JavaScript
                in the previous step. Note that no Implements is required as long as you add commands to the
                default namespace of Alchemy.Plugins.YourPluginName.Commands.CommandName. If you've created your
                namespace for the command differs, you will have to supply it in the 2nd argument of <codeInline>AddCommand</codeInline>.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              Add a class that inherits from <codeEntityReference>T:Alchemy4Tridion.Plugins.GUI.Configuration.ResourceGroup</codeEntityReference>.
              This represents a Resource Group... that is a uniquely named group that contains a set of JavaScript and
              Stylesheets.  When a Tridion page or view loads, it bundles all of the resource groups utilized by the
              page's dependencies into a single source and minifies it (minification can be turned off of course).
            </para>
            <para>
              Resource groups can be dependent on other resource groups... this ensures that resources in those groups
              are added above yours during the bundling process. If a group is included more than once for a particular view
              due to multiple items being dependent on it, Tridion ensures that those resources only get included
              once and not multile times.
            </para>
            <code language="c#">
              public class MyResourceGroup : ResourceGroup
              {
                  public MyResourceGroup()
                  {
                      AddFile("my-js-file.js");
                      AddFile("my-stylesheet.css");
                      
                      Dependencies.AddAlchemyCore();
                  }
              }
            </code>
            <alert class="tip">
              <para>
                You'll notice in the above example we only have to supply the filenames and not the full paths. This
                is due to Alchemy placing static files in specific folders within the plugin package.
              </para>
            </alert>
            <para>
              If your plugin contains a command and you created the command set from the previous step, you'll
              need to reference it in your resource group.  You can use the parameterless <codeInline>AddFile</codeInline>
              method with a generic type of your command set class.
            </para>
            <code language="c#">
              AddFile&lt;MyCommands&gt;();
            </code>
            <para>
              If you require proxies to web services that you are creating, or if you need the special proxied
              out of the box services like being able to get your custom configuration client settings, you'll need
              to also call <codeInline>AddWebApiProxy</codeInline>.
            </para>
            <code language="c#">
              AddWebApiProxy();
            </code>
            <alert class="tip">
              <para>
                The WebApi proxy automatically includes a reference to the core Alchemy resource group, so there is
                no need to call <codeInline>Dependencies.AddAlchemyCore()</codeInline>. However, if you do call both
                methods, there is no harm done.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              Add a class that inherits from the Extension type that you want to add, like
              <codeEntityReference>T:Alchemy4Tridion.Plugins.GUI.Configuration.ContextMenuExtension</codeEntityReference>
              (if you want to add items to the context menu).
            </para>
            <code>
              public class MyContextMenu : ContextMenuExtension
              {
                  public MyContextMenu()
                  {
                      // This is the id which gets put on the html element for this menu (to target with css/js).
                      AssignId = "MyContextMenuId";
                      
                      // The name of this extension
                      Name = "MyName";
                      
                      // Where to add your custom items. In this case it'll be before the refresh icon.
                      InsertBefore = "cm_refresh";
                      
                      AddItem("cm_my_context", "My Context Menu", "MyCommand");
                  }
              }
            </code>
            <alert class="note">
              <para>
                The <codeInline>AddItem</codeInline> call above includes three arguments.  The first is the
                id of the element that will be created (you can use <codeInline>#cm_my_context</codeInline> in your
                css or js selectors). The second argument will be the label that is displayed.  The third argument
                is the name of the command to call when that item is clicked... in this case it'll be the custom
                command that you created.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              Configure a4t.xml, Build, Upload to Webstore, Install/Deploy.
            </para>
            <para>
              These last steps are the same regardless of the type of plugin you are building.
            </para>
          </listItem>
        </list>
      </content>
    </section>
    <relatedTopics>
      <codeEntityReference qualifyHint="true">G:Alchemy4Tridion.Plugins.GUI</codeEntityReference>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
