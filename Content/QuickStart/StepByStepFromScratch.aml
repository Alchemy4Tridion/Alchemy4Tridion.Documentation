<?xml version="1.0" encoding="utf-8"?>
<topic id="d9c1d722-3006-4bf7-9a61-5a7bcb46fa86" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
        Developing a plugin from the ground up is as simple as installing the necessary NuGet package and ensuring you
        have some core classes. If this sounds a little intimidating at first and you'd rather see an entire
        project example to use as a guideline, 
        check out <link xlink:href="c7b3af6b-3f51-46d8-a792-d46a805805e1">this guide</link>.
      </para>
    </introduction>

    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->

    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Create an Alchemy4Tridion Plugin From Scratch</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Create a new Class Library project in Visual Studio.</para>
          </content>
        </step>
        <step>
          <content>
            <para>In the Package Manager console type the following:</para>
            <code>
              Install-Package Alchemy4Tridion.Plugin - Pre
            </code>
            <alert class="note">
              <para>
                Only once Alchemy4Tridion has come out of public beta testing will version 1.0 be available without
                the "-Pre" flag.
              </para>
            </alert>
            <para>
              Alternatively, you can also right click your class library project use the "Manage Nuget Packages"
              option to search and install the Alchemy4Tridion.Plugin package (make sure the prerelease
              filter option is selected).
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Rename the installed ServiceController to your liking. In the 2nd argument of the 
              AlchemyRoutePrefixAttribute on the controller, feel free to rename "Service" as well. Note that this 
              is the name that you'll use in your JavaScript to call your service. If you do not require a web 
              service for your plugin delete ServiceController.
            </para>
            <alert class="important">
              <para>
                As of the 0.6 release, the ServiceController class is no longer included in the NuGet package.
              </para>
            </alert>
          </content>
        </step>
        <step>
          <content>
            <para>
              Feel free to rename the AlchemyPlugin.cs at the root of your project.  If you are going to be
              using encrypted custom configuration settings, you can also set your encryption key here.
            </para>
            <code>
              public class MySuperAwesomePlugin : AlchemyPluginBase
              {
                  public override void Configure(IPluginServiceLocator services)
                  {
                      services.SettingsEncryptor.EncryptionKey = "MySecretEncryptionKey";
                  }
              }
            </code>
            <para>
              This is your plugin class, and is the entry for the framework to discover your plugin.  The only
              requirement for this class is that it extends AlchemyPluginBase.
            </para>
            <alert class="warning">
              <para>
                As of 0.6, the AlchemyPlugin.cs class is no longer included in the NuGet package.  If not using the Alchemy4Tridion Developer Pack, you'll have to create this class manually.  If you attempt to build the project without creating this class, the build will fail and you will see an appropriate error message.
              </para>
              <para>
                If you are using the Plugin Project templates from the developer pack, this class is automatically included.
              </para>
            </alert>
          </content>
        </step>
        <step>
          <content>
            <para>
              Add any static files that your plugin needs (JavaScript, CSS, images, .ascx controls, .aspx views, etc) 
              under a /Static/ or /Assets/ folder in your project. Note that you can organize your static files any way 
              you want within the static folder, but at build time the plugin package will put them in specific folders 
              (e.g. all JavaScript files will end up in /assets/js/ of the plugin package).
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Add any Config classes that represent configuration elements of the traditional Editor.config file.
              (covered by another topic in this documentation).
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Build your project in Visual Studio.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              If you want to upload your project to the Webstore, complete the dialog that pops up after supplying your Webstore 
              credentials.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              If you want to test your plugin directly without uploading to the Webstore, find the 
              .a4t file in the /bin/Debug/ folder of your project (assuming you built under the Debug target). 
              You can drag and drop this to the "Plugins" tab of the Alchemy UI.
            </para>
            <alert class="caution">
              <para>
                Since this plugin has not been uploaded to the Webstore it is considered a development plugin. Be mindful
                of any other plugins that may already be installed; if your plugin doesn't have a unique name
                it will get an error saying it is already installed.
              </para>
            </alert>
          </content>
        </step>
        <step>
          <content>
            <para>
              Plugins require a page reload to show up in the Tridion GUI. After installing
              (or uninstalling) a plugin, a reload icon will appear in the top bar of the Alchemy UI, near where your username is displayed.
              You can either click this or use your browser's refresh button.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Your plugin is now installed and any changes to the GUI should now be visible in the CME.
            </para>
            <alert class="note">
              <para>
                Tridion GUI cache can be a tricky at timess.  The Alchemy4Tridion framework will automatically
                recycle application pools as well as increment the System.config's modification attribute, however
                it has been noted that sometimes the cache just won't clear for particular files, and you may have to
                clear your browser's cache manually.
              </para>
              <para>
                If you don't see the desired results, you may have just experienced this issue.
              </para>
            </alert>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- Optional next steps info -->
    <nextSteps>
      <content><para>Now that you know how to build a plugin, continue reading this documentation to
      further master new areas of plugin development.</para></content>
    </nextSteps>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
